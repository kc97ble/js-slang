// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`force_it function forces evaluation in function calls: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return 0; }
f(error());
f(force_it(error()));",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: undefined],
      "location": SourceLocation {
        "end": Position {
          "column": 18,
          "line": 3,
        },
        "start": Position {
          "column": 11,
          "line": 3,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Error: undefined",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`force_it function forces evaluation in variable declarations: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = error();
const b = force_it(error());",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: undefined],
      "location": SourceLocation {
        "end": Position {
          "column": 26,
          "line": 2,
        },
        "start": Position {
          "column": 19,
          "line": 2,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 2: Error: undefined",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`force_it function forces evaluation of elements in array expressions: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = [0, error()];
a[0];
const b = [0, force_it(error())];
b[0];",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: undefined],
      "location": SourceLocation {
        "end": Position {
          "column": 30,
          "line": 3,
        },
        "start": Position {
          "column": 23,
          "line": 3,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 3: Error: undefined",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`infinite functions with pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x,f(x+1)); }
head(f(0))+head(tail(tail(f(0))));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`lazy evaluation mode delays arguments in a function call: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x, y) { return y; }
f(error(), 1);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`lazy evaluation mode delays elements in an array: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = [1, error(), 2];
a[0] + a[2];",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`lazy evaluation mode delays expressions in a variable declaration: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = error();",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": undefined,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`lazy evaluation mode evaluates each expression at most once: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() { display(\\"print once\\"); return 1; }
const a = f();
a+a+a;",
  "displayResult": Array [
    "\\"print once\\"",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`lazy evaluation mode evaluates each expression only when needed: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f() { display(\\"f\\"); return 1; }
function g() { display(\\"g\\"); return 2; }
function h() { display(\\"h\\"); return 3; }
const a=f();
const b=g();
const c=h();
display(c); // \\"h\\", 3
display(b); // \\"g\\", 2
display(c); // 3",
  "displayResult": Array [
    "\\"h\\"",
    "3",
    "\\"g\\"",
    "2",
    "3",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
