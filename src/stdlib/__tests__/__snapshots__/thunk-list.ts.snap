// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`each expression is evaluated at most once: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(){
  display(\\"info\\");
  return 0;
}
const zero = f();
display(pair(zero, zero));",
  "displayResult": Array [
    "\\"info\\"",
    "[0, 0]",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": Array [
    0,
    0,
  ],
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`each expression is evaluated only when needed: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const error_tail = pair(1, error());
display(head(error_tail));",
  "displayResult": Array [
    "1",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`filter with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x, f(x+1)); }
function h(x){return x%2===0;}
head(filter(h, f(1)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`infinite functions with list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return list(x, f(x+1)); }
head(f(0))+head(head(tail(f(0))));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 1,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`infinite functions with pair: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x, f(x+1)); }
head(f(0))+head(tail(tail(f(0))));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is_null with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return list(x, f(x+1)); }
is_null(f(0));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": false,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`is_pair && is_list with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return list(x, f(x+1)); }
is_pair(f(0)) && is_list(f(0));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": true,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`list_ref with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x, f(x+1)); }
list_ref(f(0), 3);",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 3,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`map with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x, f(x+1)); }
head(tail(map((a)=>{return a*a;}, f(1))));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`member with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x*x, f(x+1)); }
head(member(4, f(0)));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 4,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`non-pair error for head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "head(\\"head\\");",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: head(xs) expects a pair as argument xs, but encountered "head"],
      "location": SourceLocation {
        "end": Position {
          "column": 12,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: head(xs) expects a pair as argument xs, but encountered \\"head\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-pair error for set_head: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_head(\\"pair\\", 10);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: set_head(xs,x) expects a pair as argument xs, but encountered "pair"],
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: set_head(xs,x) expects a pair as argument xs, but encountered \\"pair\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-pair error for set_tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "set_tail(\\"pair\\", 10);",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: set_tail(xs,x) expects a pair as argument xs, but encountered "pair"],
      "location": SourceLocation {
        "end": Position {
          "column": 20,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: set_tail(xs,x) expects a pair as argument xs, but encountered \\"pair\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`non-pair error for tail: expectParsedError 1`] = `
Object {
  "alertResult": Array [],
  "code": "tail(\\"tail\\");",
  "displayResult": Array [],
  "errors": Array [
    ExceptionError {
      "error": [Error: tail(xs) expects a pair as argument xs, but encountered "tail"],
      "location": SourceLocation {
        "end": Position {
          "column": 12,
          "line": 1,
        },
        "start": Position {
          "column": 0,
          "line": 1,
        },
      },
      "severity": "Error",
      "type": "Runtime",
    },
  ],
  "parsedErrors": "Line 1: Error: tail(xs) expects a pair as argument xs, but encountered \\"tail\\"",
  "result": undefined,
  "resultStatus": "error",
  "visualiseListResult": Array [],
}
`;

exports[`remove_all with infinite function: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "function f(x) { return pair(x, f(x+1)); }
head(tail(remove_all(1, f(0))));",
  "displayResult": Array [],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`self-loop lazy list: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const ones = pair(1, ones);
display(head(ones)+head(tail(ones)));",
  "displayResult": Array [
    "2",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 2,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`set_head in lazy evaluation: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1, 2);
set_head(a, 10);
display(head(a));",
  "displayResult": Array [
    "10",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;

exports[`set_tail in lazy evaluation: expectResult 1`] = `
Object {
  "alertResult": Array [],
  "code": "const a = pair(1, 2);
set_tail(a, 10);
display(tail(a));",
  "displayResult": Array [
    "10",
  ],
  "errors": Array [],
  "parsedErrors": "",
  "result": 10,
  "resultStatus": "finished",
  "visualiseListResult": Array [],
}
`;
